
#include <string>

BEGIN_NAMESPACE( jace )

/**
 * Contains the definitions for the template specializations of the template class, JArray.
 *
 * This file is internal to the JACE library.
 *
 */

template <> inline
JArray< ::jace::proxy::types::JBoolean>::JArray( int size ) : JObject( NO_OP ) {

  JNIEnv* env = helper::attach();
  jarray array = env->NewBooleanArray( size );

  helper::catchAndThrow();

  /* If there was a java exception that was thrown, we don't make it here,
   * but I'm not sure whether the JNI documentation states that a java exception
   * will be thrown or not. I do know that it does state that the returned array
   * will be NULL if an error occurs, so I'm doing an extra check here.
   */
  if ( array == NULL ) {
    std::string msg = std::string( "JArray<JBoolean>( int size ) - Unable to construct a new array." ) +
                 "The virtual machine's memory could be exhausted.";
    throw JNIException( msg );
  }

  setJavaJniObject( array );
  helper::deleteLocalRef( env, array );

  this->length_ = -1;
}

template <> inline
ElementProxy< ::jace::proxy::types::JBoolean> JArray< ::jace::proxy::types::JBoolean>::operator[]( const int& index ) {

  #ifdef JACE_CHECK_NULLS
    if ( ! this->getJavaJniObject() ) {
      throw ::jace::JNIException( "[JArray::operator[]] Can not dereference a null array." );
    }
  #endif
  
  #ifdef JACE_CHECK_ARRAYS
    if ( index >= length() ) {
      throw ::jace::JNIException( "[JArray::operator[]] invalid array index." );
    }
  #endif

  jbooleanArray thisArray = static_cast<jbooleanArray>( getJavaJniArray() );
  JNIEnv* env = helper::attach();
  jboolean val;
  env->GetBooleanArrayRegion( thisArray, index, 1, &val );
  jvalue value;
  value.z = val;
  return ElementProxy< ::jace::proxy::types::JBoolean>( getJavaJniArray(), value, index );
}

template <> inline
const ElementProxy< ::jace::proxy::types::JBoolean> JArray< ::jace::proxy::types::JBoolean>::operator[]( const int& index ) const {

  #ifdef JACE_CHECK_NULLS
    if ( ! this->getJavaJniObject() ) {
      throw ::jace::JNIException( "[JArray::operator[]] Can not dereference a null array." );
    }
  #endif
  
  #ifdef JACE_CHECK_ARRAYS
    if ( index >= length() ) {
      throw ::jace::JNIException( "[JArray::operator[]] invalid array index." );
    }
  #endif

  jbooleanArray thisArray = static_cast<jbooleanArray>( getJavaJniArray() );
  JNIEnv* env = helper::attach();
  jboolean val;
  env->GetBooleanArrayRegion( thisArray, index, 1, &val );
  jvalue value;
  value.z = val;
  return ElementProxy< ::jace::proxy::types::JBoolean>( getJavaJniArray(), value, index );
}


template <> inline
JArray< ::jace::proxy::types::JByte>::JArray( int size ) : JObject( NO_OP ) {

  JNIEnv* env = helper::attach();
  jarray array = env->NewByteArray( size );

  helper::catchAndThrow();

  if ( array == NULL ) {
    std::string msg = std::string( "JArray<JByte>( int size ) - Unable to construct a new byte array." ) +
                 "The virtual machine's memory could be exhausted.";
    throw JNIException( msg );
  }

  setJavaJniObject( array );
  helper::deleteLocalRef( env, array );

  this->length_ = -1;
}

template <> inline
ElementProxy< ::jace::proxy::types::JByte> JArray< ::jace::proxy::types::JByte>::operator[]( const int& index ) {

  #ifdef JACE_CHECK_NULLS
    if ( ! this->getJavaJniObject() ) {
      throw ::jace::JNIException( "[JArray::operator[]] Can not dereference a null array." );
    }
  #endif

  #ifdef JACE_CHECK_ARRAYS
    if ( index >= length() ) {
      throw ::jace::JNIException( "[JArray::operator[]] invalid array index." );
    }
  #endif

  jbyteArray thisArray = static_cast<jbyteArray>( getJavaJniArray() );
  JNIEnv* env = helper::attach();
  jbyte byte;
  env->GetByteArrayRegion( thisArray, index, 1, &byte );
  jvalue value;
  value.b = byte;
  return ElementProxy< ::jace::proxy::types::JByte>( getJavaJniArray(), value, index );
}

template <> inline
const ElementProxy< ::jace::proxy::types::JByte> JArray< ::jace::proxy::types::JByte>::operator[]( const int& index ) const {

  #ifdef JACE_CHECK_NULLS
    if ( ! this->getJavaJniObject() ) {
      throw ::jace::JNIException( "[JArray::operator[]] Can not dereference a null array." );
    }
  #endif

  #ifdef JACE_CHECK_ARRAYS
    if ( index >= length() ) {
      throw ::jace::JNIException( "[JArray::operator[]] invalid array index." );
    }
  #endif

  jbyteArray thisArray = static_cast<jbyteArray>( getJavaJniArray() );
  JNIEnv* env = helper::attach();
  jbyte byte;
  env->GetByteArrayRegion( thisArray, index, 1, &byte );
  jvalue value;
  value.b = byte;
  return ElementProxy< ::jace::proxy::types::JByte>( getJavaJniArray(), value, index );
}

template <> inline
JArray< ::jace::proxy::types::JChar>::JArray( int size ) : JObject( NO_OP ) {

  JNIEnv* env = helper::attach();
  jarray array = env->NewCharArray( size );

  helper::catchAndThrow();

  if ( array == NULL ) {
    std::string msg = std::string( "JArray<JChar>( int size ) - Unable to construct a new array." ) +
                 "The virtual machine's memory could be exhausted.";
    throw JNIException( msg );
  }

  setJavaJniObject( array );
  helper::deleteLocalRef( env, array );

  this->length_ = -1;
}

template <> inline
ElementProxy< ::jace::proxy::types::JChar> JArray< ::jace::proxy::types::JChar>::operator[]( const int& index ) {

  #ifdef JACE_CHECK_NULLS
    if ( ! this->getJavaJniObject() ) {
      throw ::jace::JNIException( "[JArray::operator[]] Can not dereference a null array." );
    }
  #endif

  #ifdef JACE_CHECK_ARRAYS
    if ( index >= length() ) {
      throw ::jace::JNIException( "[JArray::operator[]] invalid array index." );
    }
  #endif

  jcharArray thisArray = static_cast<jcharArray>( getJavaJniArray() );
  JNIEnv* env = helper::attach();
  jchar val;
  env->GetCharArrayRegion( thisArray, index, 1, &val );
  jvalue value;
  value.c = val;
  return ElementProxy< ::jace::proxy::types::JChar>( getJavaJniArray(), value, index );
}

template <> inline
const ElementProxy< ::jace::proxy::types::JChar> JArray< ::jace::proxy::types::JChar>::operator[]( const int& index ) const {

  #ifdef JACE_CHECK_NULLS
    if ( ! this->getJavaJniObject() ) {
      throw ::jace::JNIException( "[JArray::operator[]] Can not dereference a null array." );
    }
  #endif

  #ifdef JACE_CHECK_ARRAYS
    if ( index >= length() ) {
      throw ::jace::JNIException( "[JArray::operator[]] invalid array index." );
    }
  #endif

  jcharArray thisArray = static_cast<jcharArray>( getJavaJniArray() );
  JNIEnv* env = helper::attach();
  jchar val;
  env->GetCharArrayRegion( thisArray, index, 1, &val );
  jvalue value;
  value.c = val;
  return ElementProxy< ::jace::proxy::types::JChar>( getJavaJniArray(), value, index );
}


template <> inline
JArray< ::jace::proxy::types::JDouble>::JArray( int size ) : JObject( NO_OP ) {

  JNIEnv* env = helper::attach();
  jarray array = env->NewDoubleArray( size );

  helper::catchAndThrow();

  if ( array == NULL ) {
    std::string msg = std::string( "JArray<JDouble>( int size ) - Unable to construct a new array." ) +
                 "The virtual machine's memory could be exhausted.";
    throw JNIException( msg );
  }

  setJavaJniObject( array );
  helper::deleteLocalRef( env, array );

  this->length_ = -1;
}

template <> inline
ElementProxy< ::jace::proxy::types::JDouble> JArray< ::jace::proxy::types::JDouble>::operator[]( const int& index ) {

  #ifdef JACE_CHECK_NULLS
    if ( ! this->getJavaJniObject() ) {
      throw ::jace::JNIException( "[JArray::operator[]] Can not dereference a null array." );
    }
  #endif

  #ifdef JACE_CHECK_ARRAYS
    if ( index >= length() ) {
      throw ::jace::JNIException( "[JArray::operator[]] invalid array index." );
    }
  #endif

  jdoubleArray thisArray = static_cast<jdoubleArray>( getJavaJniArray() );
  JNIEnv* env = helper::attach();
  jdouble val;
  env->GetDoubleArrayRegion( thisArray, index, 1, &val );
  jvalue value;
  value.d = val;
  return ElementProxy< ::jace::proxy::types::JDouble>( getJavaJniArray(), value, index );
}

template <> inline
const ElementProxy< ::jace::proxy::types::JDouble> JArray< ::jace::proxy::types::JDouble>::operator[]( const int& index ) const {

  #ifdef JACE_CHECK_NULLS
    if ( ! this->getJavaJniObject() ) {
      throw ::jace::JNIException( "[JArray::operator[]] Can not dereference a null array." );
    }
  #endif

  #ifdef JACE_CHECK_ARRAYS
    if ( index >= length() ) {
      throw ::jace::JNIException( "[JArray::operator[]] invalid array index." );
    }
  #endif

  jdoubleArray thisArray = static_cast<jdoubleArray>( getJavaJniArray() );
  JNIEnv* env = helper::attach();
  jdouble val;
  env->GetDoubleArrayRegion( thisArray, index, 1, &val );
  jvalue value;
  value.d = val;
  return ElementProxy< ::jace::proxy::types::JDouble>( getJavaJniArray(), value, index );
}


template <> inline
JArray< ::jace::proxy::types::JFloat>::JArray( int size ) : JObject( NO_OP ) {

  JNIEnv* env = helper::attach();
  jarray array = env->NewFloatArray( size );

  helper::catchAndThrow();

  if ( array == NULL ) {
    std::string msg = std::string( "JArray<JFloat>( int size ) - Unable to construct a new array." ) +
                 "The virtual machine's memory could be exhausted.";
    throw JNIException( msg );
  }

  setJavaJniObject( array );
  helper::deleteLocalRef( env, array );

  this->length_ = -1;
}

template <> inline
ElementProxy< ::jace::proxy::types::JFloat> JArray< ::jace::proxy::types::JFloat>::operator[]( const int& index ) {

  #ifdef JACE_CHECK_NULLS
    if ( ! this->getJavaJniObject() ) {
      throw ::jace::JNIException( "[JArray::operator[]] Can not dereference a null array." );
    }
  #endif

  #ifdef JACE_CHECK_ARRAYS
    if ( index >= length() ) {
      throw ::jace::JNIException( "[JArray::operator[]] invalid array index." );
    }
  #endif

  jfloatArray thisArray = static_cast<jfloatArray>( getJavaJniArray() );
  JNIEnv* env = helper::attach();
  jfloat val;
  env->GetFloatArrayRegion( thisArray, index, 1, &val );
  jvalue value;
  value.f = val;
  return ElementProxy< ::jace::proxy::types::JFloat>( getJavaJniArray(), value, index );
}

template <> inline
const ElementProxy< ::jace::proxy::types::JFloat> JArray< ::jace::proxy::types::JFloat>::operator[]( const int& index ) const {

  #ifdef JACE_CHECK_NULLS
    if ( ! this->getJavaJniObject() ) {
      throw ::jace::JNIException( "[JArray::operator[]] Can not dereference a null array." );
    }
  #endif

  #ifdef JACE_CHECK_ARRAYS
    if ( index >= length() ) {
      throw ::jace::JNIException( "[JArray::operator[]] invalid array index." );
    }
  #endif

  jfloatArray thisArray = static_cast<jfloatArray>( getJavaJniArray() );
  JNIEnv* env = helper::attach();
  jfloat val;
  env->GetFloatArrayRegion( thisArray, index, 1, &val );
  jvalue value;
  value.f = val;
  return ElementProxy< ::jace::proxy::types::JFloat>( getJavaJniArray(), value, index );
}


template <> inline
JArray< ::jace::proxy::types::JInt>::JArray( int size ) : JObject( NO_OP ) {

  JNIEnv* env = helper::attach();
  jarray array = env->NewIntArray( size );

  helper::catchAndThrow();

  if ( array == NULL ) {
    std::string msg = std::string( "JArray<JInt>( int size ) - Unable to construct a new array." ) +
                 "The virtual machine's memory could be exhausted.";
    throw JNIException( msg );
  }

  setJavaJniObject( array );
  helper::deleteLocalRef( env, array );

  this->length_ = -1;
}

template <> inline
ElementProxy< ::jace::proxy::types::JInt> JArray< ::jace::proxy::types::JInt>::operator[]( const int& index ) {

  #ifdef JACE_CHECK_NULLS
    if ( ! this->getJavaJniObject() ) {
      throw ::jace::JNIException( "[JArray::operator[]] Can not dereference a null array." );
    }
  #endif

  #ifdef JACE_CHECK_ARRAYS
    if ( index >= length() ) {
      throw ::jace::JNIException( "[JArray::operator[]] invalid array index." );
    }
  #endif

  jintArray thisArray = static_cast<jintArray>( getJavaJniArray() );
  JNIEnv* env = helper::attach();
  jint val;
  env->GetIntArrayRegion( thisArray, index, 1, &val );
  jvalue value;
  value.i = val;
  return ElementProxy< ::jace::proxy::types::JInt>( getJavaJniArray(), value, index );
}

template <> inline
const ElementProxy< ::jace::proxy::types::JInt> JArray< ::jace::proxy::types::JInt>::operator[]( const int& index ) const {

  #ifdef JACE_CHECK_NULLS
    if ( ! this->getJavaJniObject() ) {
      throw ::jace::JNIException( "[JArray::operator[]] Can not dereference a null array." );
    }
  #endif

  #ifdef JACE_CHECK_ARRAYS
    if ( index >= length() ) {
      throw ::jace::JNIException( "[JArray::operator[]] invalid array index." );
    }
  #endif

  jintArray thisArray = static_cast<jintArray>( getJavaJniArray() );
  JNIEnv* env = helper::attach();
  jint val;
  env->GetIntArrayRegion( thisArray, index, 1, &val );
  jvalue value;
  value.i = val;
  return ElementProxy< ::jace::proxy::types::JInt>( getJavaJniArray(), value, index );
}


template <> inline
JArray< ::jace::proxy::types::JLong>::JArray( int size ) : JObject( NO_OP ) {

  JNIEnv* env = helper::attach();
  jarray array = env->NewLongArray( size );

  helper::catchAndThrow();

  if ( array == NULL ) {
    std::string msg = std::string( "JArray<JLong>( int size ) - Unable to construct a new array." ) +
                 "The virtual machine's memory could be exhausted.";
    throw JNIException( msg );
  }

  setJavaJniObject( array );
  helper::deleteLocalRef( env, array );

  this->length_ = -1;
}

template <> inline
ElementProxy< ::jace::proxy::types::JLong> JArray< ::jace::proxy::types::JLong>::operator[]( const int& index ) {

  #ifdef JACE_CHECK_NULLS
    if ( ! this->getJavaJniObject() ) {
      throw ::jace::JNIException( "[JArray::operator[]] Can not dereference a null array." );
    }
  #endif

  #ifdef JACE_CHECK_ARRAYS
    if ( index >= length() ) {
      throw ::jace::JNIException( "[JArray::operator[]] invalid array index." );
    }
  #endif

  jlongArray thisArray = static_cast<jlongArray>( getJavaJniArray() );
  JNIEnv* env = helper::attach();
  jlong val;
  env->GetLongArrayRegion( thisArray, index, 1, &val );
  jvalue value;
  value.j = val;
  return ElementProxy< ::jace::proxy::types::JLong>( getJavaJniArray(), value, index );
}

template <> inline
const ElementProxy< ::jace::proxy::types::JLong> JArray< ::jace::proxy::types::JLong>::operator[]( const int& index ) const {

  #ifdef JACE_CHECK_NULLS
    if ( ! this->getJavaJniObject() ) {
      throw ::jace::JNIException( "[JArray::operator[]] Can not dereference a null array." );
    }
  #endif

  #ifdef JACE_CHECK_ARRAYS
    if ( index >= length() ) {
      throw ::jace::JNIException( "[JArray::operator[]] invalid array index." );
    }
  #endif

  jlongArray thisArray = static_cast<jlongArray>( getJavaJniArray() );
  JNIEnv* env = helper::attach();
  jlong val;
  env->GetLongArrayRegion( thisArray, index, 1, &val );
  jvalue value;
  value.j = val;
  return ElementProxy< ::jace::proxy::types::JLong>( getJavaJniArray(), value, index );
}


template <> inline
JArray< ::jace::proxy::types::JShort>::JArray( int size ) : JObject( NO_OP ) {

  JNIEnv* env = helper::attach();
  jarray array = env->NewShortArray( size );

  helper::catchAndThrow();

  if ( array == NULL ) {
    std::string msg = std::string( "JArray<JShort>( int size ) - Unable to construct a new array." ) +
                 "The virtual machine's memory could be exhausted.";
    throw JNIException( msg );
  }

  setJavaJniObject( array );
  helper::deleteLocalRef( env, array );

  this->length_ = -1;
}

template <> inline
ElementProxy< ::jace::proxy::types::JShort> JArray< ::jace::proxy::types::JShort>::operator[]( const int& index ) {

  #ifdef JACE_CHECK_NULLS
    if ( ! this->getJavaJniObject() ) {
      throw ::jace::JNIException( "[JArray::operator[]] Can not dereference a null array." );
    }
  #endif

  #ifdef JACE_CHECK_ARRAYS
    if ( index >= length() ) {
      throw ::jace::JNIException( "[JArray::operator[]] invalid array index." );
    }
  #endif

  jshortArray thisArray = static_cast<jshortArray>( getJavaJniArray() );
  JNIEnv* env = helper::attach();
  jshort val;
  env->GetShortArrayRegion( thisArray, index, 1, &val );
  jvalue value;
  value.s = val;
  return ElementProxy< ::jace::proxy::types::JShort>( getJavaJniArray(), value, index );
}

template <> inline
const ElementProxy< ::jace::proxy::types::JShort> JArray< ::jace::proxy::types::JShort>::operator[]( const int& index ) const {

  #ifdef JACE_CHECK_NULLS
    if ( ! this->getJavaJniObject() ) {
      throw ::jace::JNIException( "[JArray::operator[]] Can not dereference a null array." );
    }
  #endif

  #ifdef JACE_CHECK_ARRAYS
    if ( index >= length() ) {
      throw ::jace::JNIException( "[JArray::operator[]] invalid array index." );
    }
  #endif

  jshortArray thisArray = static_cast<jshortArray>( getJavaJniArray() );
  JNIEnv* env = helper::attach();
  jshort val;
  env->GetShortArrayRegion( thisArray, index, 1, &val );
  jvalue value;
  value.s = val;
  return ElementProxy< ::jace::proxy::types::JShort>( getJavaJniArray(), value, index );
}

END_NAMESPACE( jace )

