
BEGIN_NAMESPACE( jace )

/**
 * Contains the template specialization prototypes for the template class, JField.
 *
 * This file is only for internal use of the JACE library.
 *
 */

template <>
JFieldProxy< ::jace::proxy::types::JBoolean> JField< ::jace::proxy::types::JBoolean>::get( jace::proxy::JObject& object );

template <>
JFieldProxy< ::jace::proxy::types::JBoolean> JField< ::jace::proxy::types::JBoolean>::get( const JClass* jClass );

template <>
JFieldProxy< ::jace::proxy::types::JByte> JField< ::jace::proxy::types::JByte>::get( jace::proxy::JObject& object );

template <>
JFieldProxy< ::jace::proxy::types::JByte> JField< ::jace::proxy::types::JByte>::get( const JClass* jClass );

template <>
JFieldProxy< ::jace::proxy::types::JChar> JField< ::jace::proxy::types::JChar>::get( jace::proxy::JObject& object );

template <>
JFieldProxy< ::jace::proxy::types::JChar> JField< ::jace::proxy::types::JChar>::get( const JClass* jClass );

template <>
JFieldProxy< ::jace::proxy::types::JShort> JField< ::jace::proxy::types::JShort>::get( jace::proxy::JObject& object );

template <>
JFieldProxy< ::jace::proxy::types::JShort> JField< ::jace::proxy::types::JShort>::get( const JClass* jClass );

template <>
JFieldProxy< ::jace::proxy::types::JInt> JField< ::jace::proxy::types::JInt>::get( jace::proxy::JObject& object );

template <>
JFieldProxy< ::jace::proxy::types::JInt> JField< ::jace::proxy::types::JInt>::get( const JClass* jClass );

template <>
JFieldProxy< ::jace::proxy::types::JLong> JField< ::jace::proxy::types::JLong>::get( jace::proxy::JObject& object );

template <>
JFieldProxy< ::jace::proxy::types::JLong> JField< ::jace::proxy::types::JLong>::get( const JClass* jClass );

template <>
JFieldProxy< ::jace::proxy::types::JFloat> JField< ::jace::proxy::types::JFloat>::get( jace::proxy::JObject& object );

template <>
JFieldProxy< ::jace::proxy::types::JFloat> JField< ::jace::proxy::types::JFloat>::get( const JClass* jClass );

template <>
JFieldProxy< ::jace::proxy::types::JDouble> JField< ::jace::proxy::types::JDouble>::get( jace::proxy::JObject& object );

template <>
JFieldProxy< ::jace::proxy::types::JDouble> JField< ::jace::proxy::types::JDouble>::get( const JClass* jClass );

END_NAMESPACE( jace )

